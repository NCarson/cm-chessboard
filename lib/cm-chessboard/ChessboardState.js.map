{"version":3,"sources":["../../src/cm-chessboard/ChessboardState.js"],"names":[],"mappings":"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","file":"ChessboardState.js","sourcesContent":["/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\n\nexport const SQUARE_COORDINATES = [\n    \"a1\", \"b1\", \"c1\", \"d1\", \"e1\", \"f1\", \"g1\", \"h1\",\n    \"a2\", \"b2\", \"c2\", \"d2\", \"e2\", \"f2\", \"g2\", \"h2\",\n    \"a3\", \"b3\", \"c3\", \"d3\", \"e3\", \"f3\", \"g3\", \"h3\",\n    \"a4\", \"b4\", \"c4\", \"d4\", \"e4\", \"f4\", \"g4\", \"h4\",\n    \"a5\", \"b5\", \"c5\", \"d5\", \"e5\", \"f5\", \"g5\", \"h5\",\n    \"a6\", \"b6\", \"c6\", \"d6\", \"e6\", \"f6\", \"g6\", \"h6\",\n    \"a7\", \"b7\", \"c7\", \"d7\", \"e7\", \"f7\", \"g7\", \"h7\",\n    \"a8\", \"b8\", \"c8\", \"d8\", \"e8\", \"f8\", \"g8\", \"h8\"\n]\n\nexport class ChessboardState {\n\n    constructor() {\n        this.squares = new Array(64).fill(null)\n        this.orientation = null\n        this.markers = []\n    }\n\n    setPiece(index, piece) {\n        this.squares[index] = piece\n    }\n\n    addMarker(index, type) {\n        this.markers.push({index: index, type: type})\n    }\n\n    removeMarkers(index = null, type = null) {\n        if (index === null && type === null) {\n            this.markers = []\n        } else {\n            this.markers = this.markers.filter((marker) => {\n                if (marker.type === null) {\n                    if (index === marker.index) {\n                        return false\n                    }\n                } else if (index === null) {\n                    if (marker.type === type) {\n                        return false\n                    }\n                } else if (marker.type === type && index === marker.index) {\n                    return false\n                }\n                return true\n            })\n        }\n    }\n\n    setPosition(fen) {\n        if (fen) {\n            const parts = fen.replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").split(/\\/|\\s/)\n            for (let part = 0; part < 8; part++) {\n                const row = parts[7 - part].replace(/\\d/g, (str) => {\n                    const numSpaces = parseInt(str)\n                    let ret = ''\n                    for (let i = 0; i < numSpaces; i++) {\n                        ret += '-'\n                    }\n                    return ret\n                })\n                for (let c = 0; c < 8; c++) {\n                    const char = row.substr(c, 1)\n                    let piece = null\n                    if (char !== '-') {\n                        if (char.toUpperCase() === char) {\n                            piece = `w${char.toLowerCase()}`\n                        } else {\n                            piece = `b${char}`\n                        }\n                    }\n                    this.squares[part * 8 + c] = piece\n                }\n            }\n        }\n    }\n\n    getPosition() {\n        let parts = new Array(8).fill(\"\")\n        for (let part = 0; part < 8; part++) {\n            let spaceCounter = 0\n            for (let i = 0; i < 8; i++) {\n                const piece = this.squares[part * 8 + i]\n                if (piece === null) {\n                    spaceCounter++\n                } else {\n                    if (spaceCounter > 0) {\n                        parts[7 - part] += spaceCounter\n                        spaceCounter = 0\n                    }\n                    const color = piece.substr(0, 1)\n                    const name = piece.substr(1, 1)\n                    if (color === \"w\") {\n                        parts[7 - part] += name.toUpperCase()\n                    } else {\n                        parts[7 - part] += name\n                    }\n                }\n            }\n            if (spaceCounter > 0) {\n                parts[7 - part] += spaceCounter\n                spaceCounter = 0\n            }\n        }\n        return parts.join(\"/\")\n    }\n\n    squareToIndex(square) {\n        const file = square.substr(0, 1).charCodeAt(0) - 97\n        const rank = square.substr(1, 1) - 1\n        return 8 * rank + file\n    }\n\n}"]}