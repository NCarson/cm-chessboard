{"version":3,"sources":["../../src/cm-chessboard/ChessboardView.js"],"names":[],"mappings":"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","file":"ChessboardView.js","sourcesContent":["/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\n\nimport {Svg} from \"./Svg.js\"\nimport {SQUARE_COORDINATES} from \"./ChessboardState.js\"\nimport {ChessboardMoveInput} from \"./ChessboardMoveInput.js\"\n//this a circular \n//import {COLOR, MOVE_INPUT_MODE, INPUT_EVENT_TYPE} from \"./Chessboard.js\"\nimport {ChessboardPiecesAnimation} from \"./ChessboardPiecesAnimation.js\"\n\nconst SPRITE_LOADING_STATUS = {\n    notLoaded: 1,\n    loading: 2,\n    loaded: 3\n}\n\n// kludge: redefined -- see above\nconst COLOR = {\n    white: \"w\",\n    black: \"b\"\n}\nconst MOVE_INPUT_MODE = {\n    viewOnly: 0,\n    dragPiece: 1,\n    dragMarker: 2\n}\nconst INPUT_EVENT_TYPE = {\n    moveStart: \"moveStart\",\n    moveDone: \"moveDone\",\n    moveCanceled: \"moveCanceled\",\n    context: \"context\"\n}\n\nexport class ChessboardView {\n\n    constructor(chessboard, callbackAfterCreation) {\n        this.animationRunning = false\n        this.currentAnimation = null\n        this.chessboard = chessboard\n        this.spriteLoadWaitingTries = 0\n        this.loadSprite(chessboard.props, () => {\n            this.spriteLoadWaitDelay = 0\n            this.moveInput = new ChessboardMoveInput(this, chessboard.state, chessboard.props,\n                this.moveStartCallback.bind(this),\n                this.moveDoneCallback.bind(this),\n                this.moveCanceledCallback.bind(this)\n            )\n            this.animationQueue = []\n            if (chessboard.props.responsive) {\n                this.resizeListener = this.handleResize.bind(this)\n                window.addEventListener(\"resize\", this.resizeListener)\n            }\n            if (chessboard.props.moveInputMode !== MOVE_INPUT_MODE.viewOnly) {\n                this.pointerDownListener = this.pointerDownHandler.bind(this)\n                this.chessboard.element.addEventListener(\"mousedown\", this.pointerDownListener)\n                this.chessboard.element.addEventListener(\"touchstart\", this.pointerDownListener)\n            }\n            this.createSvgAndGroups()\n            this.updateMetrics()\n            callbackAfterCreation()\n        })\n    }\n\n    pointerDownHandler(e) {\n        e.preventDefault()\n        this.moveInput.onPointerDown(e)\n    }\n\n    destroy() {\n        this.moveInput.destroy()\n        window.removeEventListener('resize', this.resizeListener)\n        this.chessboard.element.removeEventListener(\"mousedown\", this.pointerDownListener)\n        this.chessboard.element.removeEventListener(\"touchstart\", this.pointerDownListener)\n        window.clearTimeout(this.resizeDebounce)\n        window.clearTimeout(this.redrawDebounce)\n        window.clearTimeout(this.drawPiecesDebounce)\n        window.clearTimeout(this.drawMarkersDebounce)\n        Svg.removeElement(this.svg)\n        this.animationQueue = []\n        if (this.currentAnimation) {\n            cancelAnimationFrame(this.currentAnimation.frameHandle)\n        }\n    }\n\n    // Sprite //\n\n    loadSprite(props, callback) {\n        if (ChessboardView.spriteLoadingStatus === SPRITE_LOADING_STATUS.notLoaded) {\n            ChessboardView.spriteLoadingStatus = SPRITE_LOADING_STATUS.loading\n            Svg.loadSprite(props.sprite.url, [\n                \"wk\", \"wq\", \"wr\", \"wb\", \"wn\", \"wp\",\n                \"bk\", \"bq\", \"br\", \"bb\", \"bn\", \"bp\",\n                \"marker1\", \"marker2\"], () => {\n                ChessboardView.spriteLoadingStatus = SPRITE_LOADING_STATUS.loaded\n                callback()\n            }, props.sprite.grid)\n        } else if (ChessboardView.spriteLoadingStatus === SPRITE_LOADING_STATUS.loading) {\n            setTimeout(() => {\n                this.spriteLoadWaitingTries++\n                if (this.spriteLoadWaitingTries < 50) {\n                    this.loadSprite(props, callback)\n                } else {\n                    console.error(\"timeout loading sprite\", props.sprite.url)\n                }\n            }, this.spriteLoadWaitDelay)\n            this.spriteLoadWaitDelay += 10\n        } else if (ChessboardView.spriteLoadingStatus === SPRITE_LOADING_STATUS.loaded) {\n            callback()\n        } else {\n            console.error(\"error ChessboardView.spriteLoadingStatus\", ChessboardView.spriteLoadingStatus)\n        }\n    }\n\n    // Draw //\n\n    createSvgAndGroups() {\n        if (this.svg) {\n            Svg.removeElement(this.svg)\n        }\n        this.svg = Svg.createSvg(this.chessboard.element)\n        let cssClass = this.chessboard.props.style.cssClass ? this.chessboard.props.style.cssClass : \"default\"\n        if (this.chessboard.props.style.showBorder) {\n            this.svg.setAttribute(\"class\", \"cm-chessboard has-border \" + cssClass)\n        } else {\n            this.svg.setAttribute(\"class\", \"cm-chessboard \" + cssClass)\n        }\n        this.updateMetrics()\n        this.boardGroup = Svg.addElement(this.svg, \"g\", {class: \"board\"})\n        this.coordinatesGroup = Svg.addElement(this.svg, \"g\", {class: \"coordinates\"})\n        this.markersGroup = Svg.addElement(this.svg, \"g\", {class: \"markers\"})\n        this.piecesGroup = Svg.addElement(this.svg, \"g\", {class: \"pieces\"})\n    }\n\n    updateMetrics() {\n        this.width = this.chessboard.element.offsetWidth\n        this.height = this.chessboard.element.offsetHeight\n        if (this.chessboard.props.style.showBorder) {\n            this.borderSize = this.width / 32\n        } else {\n            this.borderSize = this.width / 320\n        }\n        this.innerWidth = this.width - 2 * this.borderSize\n        this.innerHeight = this.height - 2 * this.borderSize\n        this.squareWidth = this.innerWidth / 8\n        this.squareHeight = this.innerHeight / 8\n        this.scalingX = this.squareWidth / this.chessboard.props.sprite.grid\n        this.scalingY = this.squareHeight / this.chessboard.props.sprite.grid\n        this.pieceXTranslate = (this.squareWidth / 2 - this.chessboard.props.sprite.grid * this.scalingY / 2)\n    }\n\n    handleResize() {\n        window.clearTimeout(this.resizeDebounce)\n        this.resizeDebounce = setTimeout(() => {\n            if (this.chessboard.element.offsetWidth !== this.width ||\n                this.chessboard.element.offsetHeight !== this.height) {\n                this.updateMetrics()\n                this.redraw()\n            }\n        })\n    }\n\n    redraw() {\n        return new Promise((resolve) => {\n            window.clearTimeout(this.redrawDebounce)\n            this.redrawDebounce = setTimeout(() => {\n                this.drawBoard()\n                this.drawCoordinates()\n                this.drawMarkers()\n                this.setCursor()\n            })\n            this.drawPiecesDebounced(this.chessboard.state.squares, () => {\n                resolve()\n            })\n        })\n    }\n\n    // Board //\n\n    drawBoard() {\n        while (this.boardGroup.firstChild) {\n            this.boardGroup.removeChild(this.boardGroup.lastChild)\n        }\n        let boardBorder = Svg.addElement(this.boardGroup, \"rect\", {width: this.width, height: this.height})\n        boardBorder.setAttribute(\"class\", \"border\")\n        if (this.chessboard.props.style.showBorder) {\n            const innerPos = this.borderSize - this.borderSize / 9\n            let borderInner = Svg.addElement(this.boardGroup, \"rect\", {\n                x: innerPos,\n                y: innerPos,\n                width: this.width - innerPos * 2,\n                height: this.height - innerPos * 2\n            })\n            borderInner.setAttribute(\"class\", \"border-inner\")\n        }\n        for (let i = 0; i < 64; i++) {\n            const index = this.chessboard.state.orientation === COLOR.white ? i : 63 - i\n            const squareColor = ((9 * index) & 8) === 0 ? 'black' : 'white'\n            const fieldClass = `square ${squareColor}`\n            const point = this.squareIndexToPoint(index)\n            const squareRect = Svg.addElement(this.boardGroup, \"rect\", {\n                x: point.x, y: point.y, width: this.squareWidth, height: this.squareHeight\n            })\n            squareRect.setAttribute(\"class\", fieldClass)\n            squareRect.setAttribute(\"data-index\", \"\" + index)\n        }\n    }\n\n    drawCoordinates() {\n        if (!this.chessboard.props.style.showCoordinates) {\n            return\n        }\n        while (this.coordinatesGroup.firstChild) {\n            this.coordinatesGroup.removeChild(this.coordinatesGroup.lastChild)\n        }\n        const inline = !this.chessboard.props.style.showBorder\n        for (let file = 0; file < 8; file++) {\n            let x = this.borderSize + (18 + this.chessboard.props.sprite.grid * file) * this.scalingX\n            let y = this.height - this.scalingY * 2.6\n            let cssClass = \"coordinate file\"\n            if (inline) {\n                x = x + this.scalingX * 15.5\n                if (this.chessboard.props.style.showBorder) {\n                    y = y - this.scalingY * 11\n                }\n                cssClass += file % 2 ? \" dark\" : \" light\"\n            }\n            const textElement = Svg.addElement(this.coordinatesGroup, \"text\", {\n                class: cssClass,\n                x: x,\n                y: y,\n                style: `font-size: ${this.scalingY * 8}px`\n            })\n            if (this.chessboard.state.orientation === COLOR.white) {\n                textElement.textContent = String.fromCharCode(97 + file)\n            } else {\n                textElement.textContent = String.fromCharCode(104 - file)\n            }\n        }\n        for (let rank = 0; rank < 8; rank++) {\n            let x = (this.borderSize / 3.7)\n            let y = this.borderSize + 24 * this.scalingY + rank * this.squareHeight\n            let cssClass = \"coordinate rank\"\n            if (inline) {\n                cssClass += rank % 2 ? \" light\" : \" dark\"\n                if (this.chessboard.props.style.showBorder) {\n                    x = x + this.scalingX * 10\n                    y = y - this.scalingY * 15\n                } else {\n                    x = x + this.scalingX * 2\n                    y = y - this.scalingY * 15\n                }\n            }\n            const textElement = Svg.addElement(this.coordinatesGroup, \"text\", {\n                class: cssClass,\n                x: x,\n                y: y,\n                style: `font-size: ${this.scalingY * 8}px`\n            })\n            if (this.chessboard.state.orientation === COLOR.white) {\n                textElement.textContent = 8 - rank\n            } else {\n                textElement.textContent = 1 + rank\n            }\n        }\n    }\n\n    // Pieces //\n\n    drawPiecesDebounced(squares = this.chessboard.state.squares, callback = null) {\n        window.clearTimeout(this.drawPiecesDebounce)\n        this.drawPiecesDebounce = setTimeout(() => {\n            this.drawPieces(squares)\n            if(callback) {\n                callback()\n            }\n        })\n    }\n\n    drawPieces(squares = this.chessboard.state.squares) {\n        while (this.piecesGroup.firstChild) {\n            this.piecesGroup.removeChild(this.piecesGroup.lastChild)\n        }\n        for (let i = 0; i < 64; i++) {\n            const pieceName = squares[i]\n            if (pieceName) {\n                this.drawPiece(i, pieceName)\n            }\n        }\n    }\n\n    drawPiece(index, pieceName) {\n        const pieceGroup = Svg.addElement(this.piecesGroup, \"g\")\n        pieceGroup.setAttribute(\"data-piece\", pieceName)\n        pieceGroup.setAttribute(\"data-index\", index)\n        const point = this.squareIndexToPoint(index)\n        const transform = (this.svg.createSVGTransform())\n        transform.setTranslate(point.x, point.y)\n        pieceGroup.transform.baseVal.appendItem(transform)\n        const pieceUse = Svg.addElement(pieceGroup, \"use\", {\"href\": `#${pieceName}`, \"class\": \"piece\"})\n        // center on square\n        const transformTranslate = (this.svg.createSVGTransform())\n        transformTranslate.setTranslate(this.pieceXTranslate, 0)\n        pieceUse.transform.baseVal.appendItem(transformTranslate)\n        // scale\n        const transformScale = (this.svg.createSVGTransform())\n        transformScale.setScale(this.scalingY, this.scalingY)\n        pieceUse.transform.baseVal.appendItem(transformScale)\n        return pieceGroup\n    }\n\n    setPieceVisibility(index, visible = true) {\n        const piece = this.getPiece(index)\n        if (visible) {\n            piece.setAttribute(\"visibility\", \"visible\")\n        } else {\n            piece.setAttribute(\"visibility\", \"hidden\")\n        }\n\n    }\n\n    getPiece(index) {\n        return this.piecesGroup.querySelector(`g[data-index='${index}']`)\n    }\n\n    // Markers //\n\n    drawMarkersDebounced() {\n        window.clearTimeout(this.drawMarkersDebounce)\n        this.drawMarkersDebounce = setTimeout(() => {\n            this.drawMarkers()\n        }, 10)\n    }\n\n    drawMarkers() {\n        while (this.markersGroup.firstChild) {\n            this.markersGroup.removeChild(this.markersGroup.firstChild)\n        }\n        this.chessboard.state.markers.forEach((marker) => {\n                this.drawMarker(marker)\n            }\n        )\n    }\n\n    drawMarker(marker) {\n        const markerGroup = Svg.addElement(this.markersGroup, \"g\")\n        markerGroup.setAttribute(\"data-index\", marker.index)\n        const point = this.squareIndexToPoint(marker.index)\n        const transform = (this.svg.createSVGTransform())\n        transform.setTranslate(point.x, point.y)\n        markerGroup.transform.baseVal.appendItem(transform)\n        const markerUse = Svg.addElement(markerGroup, \"use\",\n            {href: `#${marker.type.slice}`, class: \"marker \" + marker.type.class})\n        const transformScale = (this.svg.createSVGTransform())\n        transformScale.setScale(this.scalingX, this.scalingY)\n        markerUse.transform.baseVal.appendItem(transformScale)\n        return markerGroup\n    }\n\n    // animation queue //\n\n    animatePieces(fromSquares, toSquares, callback) {\n        this.animationQueue.push({fromSquares: fromSquares, toSquares: toSquares, callback: callback})\n        if (!this.animationRunning) {\n            this.nextPieceAnimationInQueue()\n        }\n    }\n\n    nextPieceAnimationInQueue() {\n        const nextAnimation = this.animationQueue.shift()\n        if (nextAnimation !== undefined) {\n            this.currentAnimation = new ChessboardPiecesAnimation(this, nextAnimation.fromSquares, nextAnimation.toSquares, this.chessboard.props.animationDuration / (this.animationQueue.length + 1), () => {\n                if (!this.moveInput.dragablePiece) {\n                    this.drawPieces(nextAnimation.toSquares)\n                }\n                this.nextPieceAnimationInQueue()\n                if (nextAnimation.callback) {\n                    nextAnimation.callback()\n                }\n            })\n        }\n    }\n\n    // Callbacks //\n\n    moveStartCallback(index) {\n        if (this.chessboard.moveInputCallback) {\n            return this.chessboard.moveInputCallback({\n                chessboard: this.chessboard,\n                type: INPUT_EVENT_TYPE.moveStart,\n                square: SQUARE_COORDINATES[index]\n            })\n        } else {\n            return true\n        }\n    }\n\n    moveDoneCallback(fromIndex, toIndex) {\n        if (this.chessboard.moveInputCallback) {\n            return this.chessboard.moveInputCallback({\n                chessboard: this.chessboard,\n                type: INPUT_EVENT_TYPE.moveDone,\n                squareFrom: SQUARE_COORDINATES[fromIndex],\n                squareTo: SQUARE_COORDINATES[toIndex]\n            })\n        } else {\n            return true\n        }\n    }\n\n    moveCanceledCallback() {\n        if (this.chessboard.moveInputCallback) {\n            this.chessboard.moveInputCallback({\n                chessboard: this.chessboard,\n                type: INPUT_EVENT_TYPE.moveCanceled\n            })\n        }\n    }\n\n    // Helpers //\n\n    setCursor() {\n        this.chessboard.initialization.then(() => {\n            if (this.chessboard.state.inputWhiteEnabled || this.chessboard.state.inputBlackEnabled) {\n                this.boardGroup.setAttribute(\"class\", \"board input-enabled\")\n            } else {\n                this.boardGroup.setAttribute(\"class\", \"board\")\n            }\n        })\n    }\n\n    squareIndexToPoint(index) {\n        let x, y\n        if (this.chessboard.state.orientation === COLOR.white) {\n            x = this.borderSize + (index % 8) * this.squareWidth\n            y = this.borderSize + (7 - Math.floor(index / 8)) * this.squareHeight\n        } else {\n            x = this.borderSize + (7 - index % 8) * this.squareWidth\n            y = this.borderSize + (Math.floor(index / 8)) * this.squareHeight\n        }\n        return {x: x, y: y}\n    }\n\n}\n\nChessboardView.spriteLoadingStatus = SPRITE_LOADING_STATUS.notLoaded\n"]}