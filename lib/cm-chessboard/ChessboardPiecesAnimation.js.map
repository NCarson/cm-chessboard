{"version":3,"sources":["../../src/cm-chessboard/ChessboardPiecesAnimation.js"],"names":[],"mappings":"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","file":"ChessboardPiecesAnimation.js","sourcesContent":["/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\n\nconst CHANGE_TYPE = {\n    move: 0,\n    appear: 1,\n    disappear: 2\n}\n\nfunction AnimationRunningException() {\n}\n\nexport class ChessboardPiecesAnimation {\n\n    constructor(view, fromSquares, toSquares, duration, callback) {\n        this.view = view\n        if (this.view.animationRunning) {\n            throw new AnimationRunningException()\n        }\n        if (fromSquares && toSquares) {\n            this.animatedElements = this.createAnimation(fromSquares, toSquares)\n            this.duration = duration\n            this.callback = callback\n            this.view.animationRunning = true\n            this.frameHandle = requestAnimationFrame(this.animationStep.bind(this))\n        }\n    }\n\n    seekChanges(fromSquares, toSquares) {\n        const appearedList = [], disappearedList = [], changes = []\n        for (let i = 0; i < 64; i++) {\n            const previousSquare = fromSquares[i]\n            const newSquare = toSquares[i]\n            if (newSquare !== previousSquare) {\n                if (newSquare) {\n                    appearedList.push({piece: newSquare, index: i})\n                }\n                if (previousSquare) {\n                    disappearedList.push({piece: previousSquare, index: i})\n                }\n            }\n        }\n        appearedList.forEach((appeared) => {\n            let shortestDistance = 8\n            let foundMoved = null\n            disappearedList.forEach((disappeared) => {\n                if (appeared.piece === disappeared.piece) {\n                    const moveDistance = this.squareDistance(appeared.index, disappeared.index)\n                    if (moveDistance < shortestDistance) {\n                        foundMoved = disappeared\n                        shortestDistance = moveDistance\n                    }\n                }\n            })\n            if (foundMoved) {\n                disappearedList.splice(disappearedList.indexOf(foundMoved), 1) // remove from disappearedList, because it is moved now\n                changes.push({\n                    type: CHANGE_TYPE.move,\n                    piece: appeared.piece,\n                    atIndex: foundMoved.index,\n                    toIndex: appeared.index\n                })\n            } else {\n                changes.push({type: CHANGE_TYPE.appear, piece: appeared.piece, atIndex: appeared.index})\n            }\n        })\n        disappearedList.forEach((disappeared) => {\n            changes.push({type: CHANGE_TYPE.disappear, piece: disappeared.piece, atIndex: disappeared.index})\n        })\n        return changes\n    }\n\n    createAnimation(fromSquares, toSquares) {\n        const changes = this.seekChanges(fromSquares, toSquares)\n        const animatedElements = []\n        changes.forEach((change) => {\n            const animatedItem = {\n                type: change.type\n            }\n            switch (change.type) {\n                case CHANGE_TYPE.move:\n                    animatedItem.element = this.view.getPiece(change.atIndex)\n                    animatedItem.atPoint = this.view.squareIndexToPoint(change.atIndex)\n                    animatedItem.toPoint = this.view.squareIndexToPoint(change.toIndex)\n                    break\n                case CHANGE_TYPE.appear:\n                    animatedItem.element = this.view.drawPiece(change.atIndex, change.piece)\n                    animatedItem.element.style.opacity = 0\n                    break\n                case CHANGE_TYPE.disappear:\n                    animatedItem.element = this.view.getPiece(change.atIndex)\n                    break\n            }\n            animatedElements.push(animatedItem)\n        })\n        return animatedElements\n    }\n\n    animationStep(time) {\n        if (!this.startTime) {\n            this.startTime = time\n        }\n        const timeDiff = time - this.startTime\n        if (timeDiff <= this.duration) {\n            this.frameHandle = requestAnimationFrame(this.animationStep.bind(this))\n        } else {\n            cancelAnimationFrame(this.frameHandle)\n            this.view.animationRunning = false\n            this.callback()\n        }\n        const t = Math.min(1, timeDiff / this.duration)\n        const progress = t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t // easeInOut\n        this.animatedElements.forEach((animatedItem) => {\n            if (animatedItem.element) {\n                switch (animatedItem.type) {\n                    case CHANGE_TYPE.move:\n                        animatedItem.element.transform.baseVal.removeItem(0)\n                        const transform = (this.view.svg.createSVGTransform())\n                        transform.setTranslate(\n                            animatedItem.atPoint.x + (animatedItem.toPoint.x - animatedItem.atPoint.x) * progress,\n                            animatedItem.atPoint.y + (animatedItem.toPoint.y - animatedItem.atPoint.y) * progress)\n                        animatedItem.element.transform.baseVal.appendItem(transform)\n                        break\n                    case CHANGE_TYPE.appear:\n                        animatedItem.element.style.opacity = progress\n                        break\n                    case CHANGE_TYPE.disappear:\n                        animatedItem.element.style.opacity = 1 - progress\n                        break\n                }\n            } else {\n                console.warn(\"animatedItem has no element\", animatedItem)\n            }\n        })\n    }\n\n    squareDistance(index1, index2) {\n        const file1 = index1 % 8\n        const rank1 = Math.floor(index1 / 8)\n        const file2 = index2 % 8\n        const rank2 = Math.floor(index2 / 8)\n        return Math.max(Math.abs(rank2 - rank1), Math.abs(file2 - file1))\n    }\n\n}"]}