{"version":3,"sources":["../../src/cm-chessboard/Svg.js"],"names":[],"mappings":"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","file":"Svg.js","sourcesContent":["/**\n * Author: shaack\n * Date: 23.11.2017\n */\n\nconst SVG_NAMESPACE = \"http://www.w3.org/2000/svg\";\n\nif (typeof NodeList.prototype.forEach !== \"function\") { // IE\n    NodeList.prototype.forEach = Array.prototype.forEach;\n}\n\nexport class Svg {\n\n    /**\n     * create the Svg in the HTML DOM\n     * @param containerElement\n     * @returns {Element}\n     */\n    static createSvg(containerElement = null) {\n        let svg = document.createElementNS(SVG_NAMESPACE, \"svg\");\n        if(containerElement) {\n            svg.setAttribute(\"width\", \"100%\");\n            svg.setAttribute(\"height\", \"100%\");\n            containerElement.appendChild(svg);\n        }\n        return svg;\n    }\n\n    /**\n     * Add an Element to a SVG DOM\n     * @param parent\n     * @param name\n     * @param attributes\n     * @returns {Element}\n     */\n    static addElement(parent, name, attributes) {\n        let element = document.createElementNS(SVG_NAMESPACE, name);\n        if (name === \"use\") {\n            attributes[\"xlink:href\"] = attributes[\"href\"]; // fix for safari\n        }\n        for (let attribute in attributes) {\n            if (attribute.indexOf(\":\") !== -1) {\n                const value = attribute.split(\":\");\n                element.setAttributeNS(\"http://www.w3.org/1999/\" + value[0], value[1], attributes[attribute]);\n            } else {\n                element.setAttribute(attribute, attributes[attribute]);\n            }\n        }\n        parent.appendChild(element);\n        return element;\n    }\n\n    /**\n     * Remove an Element from a SVG DOM\n     * @param element\n     */\n    static removeElement(element) {\n        element.parentNode.removeChild(element);\n    }\n\n    /**\n     * Load sprite into html document (as `svg/defs`), elements can be referenced by `use` from all Svgs in page\n     * @param url\n     * @param elementIds array of element-ids, relevant for `use` in the svgs\n     * @param callback called after successful load, parameter is the svg element\n     * @param grid the grid size of the sprite\n     */\n    static loadSprite(url, elementIds, callback, grid = 1) {\n        const request = new XMLHttpRequest();\n        request.open(\"GET\", url);\n        request.send();\n        request.onload = () => {\n            const response = request.response;\n            const parser = new DOMParser();\n            const svgDom = parser.parseFromString(response, \"image/svg+xml\");\n            // add relevant nodes to sprite-svg\n            const spriteSvg = this.createSvg(document.body);\n            spriteSvg.setAttribute(\"style\", \"display: none\");\n            const defs = this.addElement(spriteSvg, \"defs\");\n            // filter relevant nodes\n            elementIds.forEach((elementId) => {\n                let elementNode = svgDom.getElementById(elementId);\n                if (!elementNode) {\n                    console.error(\"error, node id=\" + elementId + \" not found in sprite\");\n                } else {\n                    const transformList = elementNode.transform.baseVal;\n                    for (let i = 0; i < transformList.numberOfItems; i++) {\n                        const transform = transformList.getItem(i);\n                        // re-transform items on grid\n                        if (transform.type === 2) {\n                            transform.setTranslate(transform.matrix.e % grid, transform.matrix.f % grid);\n                        }\n                    }\n                    // filter all ids in childs of the node\n                    let filterChilds = (childNodes) => {\n                        childNodes.forEach((childNode) => {\n                            if (childNode.nodeType === Node.ELEMENT_NODE) {\n                                childNode.removeAttribute(\"id\");\n                                if (childNode.hasChildNodes()) {\n                                    filterChilds(childNode.childNodes);\n                                }\n                            }\n                        });\n                    };\n                    filterChilds(elementNode.childNodes);\n                    defs.appendChild(elementNode);\n                }\n            });\n            callback(spriteSvg);\n        };\n    }\n}"]}