{"version":3,"sources":["../../src/cm-chessboard/Chessboard.js"],"names":[],"mappings":"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","file":"Chessboard.js","sourcesContent":["/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\n\nimport {ChessboardView} from \"./ChessboardView.js\"\nimport {SQUARE_COORDINATES, ChessboardState} from \"./ChessboardState.js\"\n\nexport const COLOR = {\n    white: \"w\",\n    black: \"b\"\n}\nexport const MOVE_INPUT_MODE = {\n    viewOnly: 0,\n    dragPiece: 1,\n    dragMarker: 2\n}\nexport const INPUT_EVENT_TYPE = {\n    moveStart: \"moveStart\",\n    moveDone: \"moveDone\",\n    moveCanceled: \"moveCanceled\",\n    context: \"context\"\n}\nexport const MARKER_TYPE = {\n    move: {class: \"move\", slice: \"marker1\"},\n    emphasize: {class: \"emphasize\", slice: \"marker2\"}\n}\nexport const PIECE = {\n    whitePawn: \"wp\",\n    whiteBishop: \"wb\",\n    whiteKnight: \"wn\",\n    whiteRook: \"wr\",\n    whiteQueen: \"wq\",\n    whiteKing: \"wk\",\n    blackPawn: \"bp\",\n    blackBishop: \"bb\",\n    blackKnight: \"bn\",\n    blackRook: \"br\",\n    blackQueen: \"bq\",\n    blackKing: \"bk\",\n}\nexport const FEN_START_POSITION = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"\nexport const FEN_EMPTY_POSITION = \"8/8/8/8/8/8/8/8\"\n\nconst DEFAULT_SPRITE_GRID = 40\n\nexport class Chessboard {\n\n    constructor(element, props = {}, callback = null) {\n        this.element = element\n        this.props = {\n            position: \"empty\", // set as fen, \"start\" or \"empty\"\n            orientation: COLOR.white, // white on bottom\n            style: {\n                cssClass: \"default\",\n                showCoordinates: true, // show ranks and files\n                showBorder: false, // display a border around the board\n            },\n            responsive: false, // resizes the board on window resize, if true\n            animationDuration: 300, // pieces animation duration in milliseconds\n            moveInputMode: MOVE_INPUT_MODE.viewOnly, // set to MOVE_INPUT_MODE.dragPiece or MOVE_INPUT_MODE.dragMarker for interactive movement\n            sprite: {\n                url: \"./assets/images/chessboard-sprite.svg\", // pieces and markers are stored es svg in the sprite\n                grid: DEFAULT_SPRITE_GRID // the sprite is tiled with one piece every 40px\n            }\n        }\n        Object.assign(this.props, props)\n        if (!this.props.sprite.grid) {\n            this.props.sprite.grid = DEFAULT_SPRITE_GRID\n        }\n        this.state = new ChessboardState()\n        this.state.orientation = this.props.orientation\n        this.initialization = new Promise((resolve) => {\n            this.view = new ChessboardView(this, () => {\n                if (this.props.position === \"start\") {\n                    this.state.setPosition(FEN_START_POSITION)\n                } else if (this.props.position === \"empty\" || this.props.position === null) {\n                    this.state.setPosition(FEN_EMPTY_POSITION)\n                } else {\n                    this.state.setPosition(this.props.position)\n                }\n                setTimeout(() => {\n                    this.view.redraw().then(() => {\n                        resolve()\n                    })\n                })\n            })\n        }).then(() => {\n            if (callback) {\n                console.warn(\"warning: the constructor callback is deprecated and will be removed in future versions\")\n                callback(this)\n            }\n\n        })\n    }\n\n    // API //\n\n    setPiece(square, piece) {\n        return new Promise((resolve) => {\n            this.initialization.then(() => {\n                this.state.setPiece(this.state.squareToIndex(square), piece)\n                this.view.drawPiecesDebounced(this.state.squares, () => {\n                    resolve()\n                })\n            })\n        })\n    }\n\n    getPiece(square) {\n        return this.state.squares[this.state.squareToIndex(square)]\n    }\n\n    setPosition(fen, animated = true) {\n        return new Promise((resolve) => {\n            this.initialization.then(() => {\n                const currentFen = this.state.getPosition()\n                const fenParts = fen.split(\" \")\n                const fenNormalized = fenParts[0]\n                if (fenNormalized !== currentFen) {\n                    const prevSquares = this.state.squares.slice(0) // clone\n                    if (fen === \"start\") {\n                        this.state.setPosition(FEN_START_POSITION)\n                    } else if (fen === \"empty\" || fen === null) {\n                        this.state.setPosition(FEN_EMPTY_POSITION)\n                    } else {\n                        this.state.setPosition(fen)\n                    }\n                    if (animated) {\n                        this.view.animatePieces(prevSquares, this.state.squares.slice(0), () => {\n                            resolve()\n                        })\n                    } else {\n                        this.view.drawPiecesDebounced()\n                        resolve()\n                    }\n                } else {\n                    resolve()\n                }\n            })\n        })\n    }\n\n    getPosition() {\n        return this.state.getPosition()\n    }\n\n    addMarker(square, type = MARKER_TYPE.emphasize) {\n        this.state.addMarker(this.state.squareToIndex(square), type)\n        this.view.drawMarkersDebounced()\n    }\n\n    getMarkers(square = null, type = null) {\n        const markersFound = []\n        this.state.markers.forEach((marker) => {\n            const markerSquare = SQUARE_COORDINATES[marker.index]\n            if (square === null && (type === null || type === marker.type) ||\n                type === null && square === markerSquare ||\n                type === marker.type && square === markerSquare) {\n                markersFound.push({square: SQUARE_COORDINATES[marker.index], type: marker.type})\n            }\n        })\n        return markersFound\n    }\n\n    removeMarkers(square = null, type = null) {\n        const index = square !== null ? this.state.squareToIndex(square) : null\n        this.state.removeMarkers(index, type)\n        this.view.drawMarkersDebounced()\n    }\n\n    setOrientation(color) {\n        this.state.orientation = color\n        this.view.redraw()\n    }\n\n    getOrientation() {\n        return this.state.orientation\n    }\n\n    destroy() {\n        return new Promise((resolve) => {\n            this.initialization.then(() => {\n                this.view.destroy()\n                this.view = null\n                this.state = null\n                this.element.removeEventListener(\"contextmenu\", this.contextMenuListener)\n                resolve()\n            })\n        })\n    }\n\n    enableMoveInput(eventHandler, color = null) {\n        if (this.props.moveInputMode === MOVE_INPUT_MODE.viewOnly) {\n            throw Error(\"props.moveInputMode is MOVE_INPUT_MODE.viewOnly\")\n        }\n        if (color === COLOR.white) {\n            this.state.inputWhiteEnabled = true\n        } else if (color === COLOR.black) {\n            this.state.inputBlackEnabled = true\n        } else {\n            this.state.inputWhiteEnabled = true\n            this.state.inputBlackEnabled = true\n        }\n        this.moveInputCallback = eventHandler\n        this.view.setCursor()\n    }\n\n    disableMoveInput() {\n        this.state.inputWhiteEnabled = false\n        this.state.inputBlackEnabled = false\n        this.moveInputCallback = null\n        this.view.setCursor()\n    }\n\n    enableContextInput(eventHandler) {\n        if (this.contextMenuListener) {\n            console.warn(\"contextMenuListener already existing\")\n            return\n        }\n        this.contextMenuListener = function (e) {\n            e.preventDefault()\n            const index = e.target.getAttribute(\"data-index\")\n            eventHandler({\n                chessboard: this,\n                type: INPUT_EVENT_TYPE.context,\n                square: SQUARE_COORDINATES[index]\n            })\n        }\n\n        this.element.addEventListener(\"contextmenu\", this.contextMenuListener)\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    disableContextInput() {\n        this.element.removeEventListener(\"contextmenu\", this.contextMenuListener)\n    }\n}"]}